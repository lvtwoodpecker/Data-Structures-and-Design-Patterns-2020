1) Draw a tree for which the preorder and inorder traversals generate the same sequence

Preorder is Node, Left, Right
Inorder is Left, Node, Right

Since both of these has Right at the end, I think if the tree only has the right child in it then they'd be the same. Example:

                                    1
                                     \\
                                      \\
                                       2
                                        \\
                                         \\
                                          3
                                           \\
                                            \\
                                             4
                                              \\
                                               \\
                                                5
                                                
Preorder: 1, 2, 3, 4, 5
Inorder: 1, 2, 3, 5, 5

2) Design an algorithm (pseudocode or prose) to check if a binary tree is a binary search tree

3) Design an algorithm (pseudocode or prose) to check if a binary tree is perfectly balanced
(smallest height possible for the number of nodes)

Answer:
The maximum number of node on a level is 2^(h-1): level 1 there's only 1 node which is the root (2^(1-1)), level 2 there are maximum of 2^(2-1) = 2 nodes, and so on.
If a tree is perfectly balanced, the last leaf's height would be smallest, and each level in a balanced tree will have the max number of nodes => size with each height is as follows:
min height = 1 -> max size = 2^(1-1) = 1
min height = 2 -> max size = 2^(2-1) + 2^(1-1) = 3 (size 2 -> 3, min height = 2)
min height = 3 -> max size = 2^(3-1) + 2^(2-1) + 2^(1-1) = 7 (size 4 -> 7, min height = 3)
min height = 4 -> max size = 2 ^ (4-1) + 7 = 15 (size 8 -> 15, min height = 4)
And so on....

It seems to me we can do a log2 to find min height from size:
Min height = log2(size) + 1 (the log is rounded down)

Pseudo: 

checkBalanced() -> Bool {
            if floor(log2(self.size)) = self.height {
              return true
            }
            
            else {
              return false
            }
}
